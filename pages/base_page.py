import os
import allure
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.common.exceptions import TimeoutException
from logger import logger


class BasePage:
    """–ë–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –¥–ª—è –≤—Å–µ—Ö PageObject ‚Äî –∏–Ω–∫–∞–ø—Å—É–ª–∏—Ä—É–µ—Ç —Ä–∞–±–æ—Ç—É —Å WebDriver."""

    def __init__(self, driver):
        self.driver = driver
        self.timeout = 10

    # ------------------------------------------------------------
    # üîπ –ù–∞–≤–∏–≥–∞—Ü–∏—è
    # ------------------------------------------------------------
    @allure.step("–û—Ç–∫—Ä—ã–≤–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É: {url}")
    def open_url(self, url: str):
        logger.info(f"–û—Ç–∫—Ä—ã–≤–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É: {url}")
        self.driver.get(url)

    @allure.step("–ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π URL")
    def get_current_url(self) -> str:
        return self.driver.current_url

    @allure.step("–û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É")
    def refresh_page(self):
        self.driver.refresh()

    # ------------------------------------------------------------
    # üîπ WebDriverWait wrapper
    # ------------------------------------------------------------
    def wait(self, timeout=None):
        timeout = timeout or self.timeout
        return WebDriverWait(self.driver, timeout)

    # ------------------------------------------------------------
    # üîπ –ü–æ–∏—Å–∫ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
    # ------------------------------------------------------------
    @allure.step("–ü–æ–∏—Å–∫ —ç–ª–µ–º–µ–Ω—Ç–∞: {locator}")
    def find(self, locator):
        return self.wait().until(EC.presence_of_element_located(locator))

    @allure.step("–ü–æ–∏—Å–∫ –≤—Å–µ—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤: {locator}")
    def find_all(self, locator):
        return self.wait().until(EC.presence_of_all_elements_located(locator))

    # ------------------------------------------------------------
    # üîπ –î–µ–π—Å—Ç–≤–∏—è
    # ------------------------------------------------------------
    @allure.step("–ö–ª–∏–∫ –ø–æ —ç–ª–µ–º–µ–Ω—Ç—É: {locator}")
    def click(self, locator):
        logger.debug(f"–ö–ª–∏–∫–∞–µ–º –ø–æ —ç–ª–µ–º–µ–Ω—Ç—É: {locator}")
        element = self.wait().until(EC.element_to_be_clickable(locator))
        element.click()

    @allure.step("–í–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞ '{text}' –≤ —ç–ª–µ–º–µ–Ω—Ç: {locator}")
    def input_text(self, locator, text: str):
        logger.debug(f"–í–≤–æ–¥–∏–º —Ç–µ–∫—Å—Ç '{text}' –≤ —ç–ª–µ–º–µ–Ω—Ç: {locator}")
        field = self.find(locator)
        field.clear()
        field.send_keys(text)

    @allure.step("–ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –∏–∑ —ç–ª–µ–º–µ–Ω—Ç–∞: {locator}")
    def get_text(self, locator) -> str:
        return self.find(locator).text.strip()

    # ------------------------------------------------------------
    # üîπ –û–∂–∏–¥–∞–Ω–∏—è
    # ------------------------------------------------------------
    @allure.step("–û–∂–∏–¥–∞–Ω–∏–µ –ø–æ–ª–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã")
    def wait_for_page_load(self, timeout=None):
        """–ñ–¥—ë—Ç, –ø–æ–∫–∞ document.readyState == 'complete'."""
        timeout = timeout or self.timeout
        try:
            self.wait(timeout).until(
                lambda driver: self.execute_js("return document.readyState") == "complete"
            )
            logger.info("–°—Ç—Ä–∞–Ω–∏—Ü–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞.")
        except TimeoutException:
            logger.warning("–ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∑–∞–Ω—è–ª–∞ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏.")
            self.take_screenshot("page_load_timeout")
            raise

    @allure.step("–û–∂–∏–¥–∞–Ω–∏–µ –≤–∏–¥–∏–º–æ—Å—Ç–∏ —ç–ª–µ–º–µ–Ω—Ç–∞: {locator}")
    def wait_for_element_visible(self, locator):
        logger.debug(f"–ñ–¥—ë–º –≤–∏–¥–∏–º–æ—Å—Ç–∏ —ç–ª–µ–º–µ–Ω—Ç–∞: {locator}")
        return self.wait().until(EC.visibility_of_element_located(locator))

    @allure.step("–û–∂–∏–¥–∞–Ω–∏–µ –∏—Å—á–µ–∑–Ω–æ–≤–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–∞: {locator}")
    def wait_for_element_invisible(self, locator):
        logger.debug(f"–ñ–¥—ë–º –∏—Å—á–µ–∑–Ω–æ–≤–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–∞: {locator}")
        return self.wait().until(EC.invisibility_of_element_located(locator))

    @allure.step("–û–∂–∏–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ —É—Å–ª–æ–≤–∏—è")
    def wait_for_condition(self, condition_fn, timeout=None):
        timeout = timeout or self.timeout
        try:
            self.wait(timeout).until(condition_fn)
        except TimeoutException:
            raise TimeoutException("–£—Å–ª–æ–≤–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ –∑–∞ –æ—Ç–≤–µ–¥—ë–Ω–Ω–æ–µ –≤—Ä–µ–º—è.")

    # ------------------------------------------------------------
    # üîπ JS –∏ Storage
    # ------------------------------------------------------------
    @allure.step("–í—ã–ø–æ–ª–Ω—è–µ–º JS: {script}")
    def execute_js_script(self, script: str, *args):
        """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ JS"""
        logger.debug(f"–í—ã–ø–æ–ª–Ω—è–µ–º JS: {script[:100]}...")
        return self.driver.execute_script(script, *args)

    def execute_js(self, script: str, *args):
        """–ê–ª–∏–∞—Å –¥–ª—è execute_js_script ‚Äî –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏"""
        return self.execute_js_script(script, *args)

    @allure.step("–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ sessionStorage: {key} = {value}")
    def set_session_storage_item(self, key, value):
        self.execute_js(f"sessionStorage.setItem('{key}', '{value}');")

    @allure.step("–ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ sessionStorage: {key}")
    def get_session_storage_item(self, key):
        return self.execute_js(f"return sessionStorage.getItem('{key}');")

    @allure.step("–û—á–∏—â–∞–µ–º sessionStorage")
    def clear_session_storage(self):
        self.execute_js("sessionStorage.clear();")

    @allure.step("–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ localStorage: {key} = {value}")
    def set_local_storage_item(self, key, value):
        self.execute_js(f"localStorage.setItem('{key}', '{value}');")

    @allure.step("–ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ localStorage: {key}")
    def get_local_storage_item(self, key):
        return self.execute_js(f"return localStorage.getItem('{key}');")

    # ------------------------------------------------------------
    # üîπ –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã
    # ------------------------------------------------------------
    @allure.step("–ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞: {locator}")
    def is_element_present(self, locator) -> bool:
        try:
            self.find(locator)
            return True
        except TimeoutException:
            return False

    @allure.step("–ü—Ä–æ–∫—Ä—É—Ç–∫–∞ –¥–æ —ç–ª–µ–º–µ–Ω—Ç–∞: {locator}")
    def scroll_to(self, locator):
        element = self.find(locator)
        self.execute_js("arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});", element)

    # ------------------------------------------------------------
    # üîπ –°–∫—Ä–∏–Ω—à–æ—Ç—ã
    # ------------------------------------------------------------
    @allure.step("–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞: {name}")
    def take_screenshot(self, name: str):
        screenshot_dir = "screenshots"
        os.makedirs(screenshot_dir, exist_ok=True)
        filepath = os.path.join(screenshot_dir, f"{name}.png")
        try:
            self.driver.save_screenshot(filepath)
            allure.attach.file(filepath, name=name, attachment_type=allure.attachment_type.PNG)
            logger.info(f"–°–∫—Ä–∏–Ω—à–æ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {filepath}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞: {e}")
