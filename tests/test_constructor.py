import allure
import pytest
from urls import Urls
from pages.main_page import MainPage
from pages.order_feed_page import OrderFeedPage
from logger import logger


@allure.suite("–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏")
class TestMainFunctionality:
    
    @allure.title("–ü–µ—Ä–µ—Ö–æ–¥ –ø–æ –∫–ª–∏–∫—É –Ω–∞ '–ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä'")
    def test_click_constructor(self, login):
        logger.info("–ù–∞—á–∞–ª–æ —Ç–µ—Å—Ç–∞: –ü–µ—Ä–µ—Ö–æ–¥ –ø–æ –∫–ª–∏–∫—É –Ω–∞ '–ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä'")
        main_page = MainPage(login)
        order_feed_page = OrderFeedPage(login)

        # üîπ –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
        main_page.open_url(Urls.BASE_URL)
        main_page.close_overlay_if_present()

        main_page.click_order_feed()
        assert Urls.FEED_URL in order_feed_page.get_current_url(), "–ù–µ –ø–µ—Ä–µ—à–ª–∏ –Ω–∞ –ª–µ–Ω—Ç—É –∑–∞–∫–∞–∑–æ–≤"

        main_page.click_constructor()
        assert Urls.BASE_URL in main_page.get_current_url(), "–ù–µ –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä"

        logger.info("–¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω: –ø–µ—Ä–µ—Ö–æ–¥ –ø–æ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä—É —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")

    @allure.title("–ü–µ—Ä–µ—Ö–æ–¥ –ø–æ –∫–ª–∏–∫—É –Ω–∞ —Ä–∞–∑–¥–µ–ª '–õ–µ–Ω—Ç–∞ –∑–∞–∫–∞–∑–æ–≤'")
    def test_click_order_feed(self, login):
        logger.info("–ù–∞—á–∞–ª–æ —Ç–µ—Å—Ç–∞: –ü–µ—Ä–µ—Ö–æ–¥ –ø–æ –∫–ª–∏–∫—É –Ω–∞ '–õ–µ–Ω—Ç–∞ –∑–∞–∫–∞–∑–æ–≤'")
        main_page = MainPage(login)
        order_feed_page = OrderFeedPage(login)

        main_page.open_url(Urls.BASE_URL)
        main_page.close_overlay_if_present()

        main_page.click_order_feed()
        assert Urls.FEED_URL in order_feed_page.get_current_url(), "–ù–µ –ø–µ—Ä–µ—à–ª–∏ –Ω–∞ –ª–µ–Ω—Ç—É –∑–∞–∫–∞–∑–æ–≤"

        logger.info("–¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω: –ø–µ—Ä–µ—Ö–æ–¥ –Ω–∞ –ª–µ–Ω—Ç—É –∑–∞–∫–∞–∑–æ–≤ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")

    @allure.title("–û—Ç–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ —Å –¥–µ—Ç–∞–ª—è–º–∏ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–∞")
    def test_ingredient_modal_opening(self, login):
        logger.info("–ù–∞—á–∞–ª–æ —Ç–µ—Å—Ç–∞: –û—Ç–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–∞")
        main_page = MainPage(login)

        main_page.open_url(Urls.BASE_URL)

        ingredient_name = main_page.get_ingredient_name()
        logger.info(f"–ù–∞–∑–≤–∞–Ω–∏–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–∞: {ingredient_name}")

        main_page.click_ingredient()
        assert main_page.is_ingredient_modal_visible(), "–ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –Ω–µ –æ—Ç–∫—Ä—ã–ª–æ—Å—å"

        modal_ingredient_name = main_page.get_ingredient_modal_name()
        assert ingredient_name == modal_ingredient_name, "–ù–∞–∑–≤–∞–Ω–∏–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–∞ –≤ –º–æ–¥–∞–ª–∫–µ –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç"

        logger.info("–¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ")

    @allure.title("–ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –ø–æ –∫–ª–∏–∫—É –Ω–∞ –∫—Ä–µ—Å—Ç–∏–∫")
    def test_ingredient_modal_closing(self, login):
        logger.info("–ù–∞—á–∞–ª–æ —Ç–µ—Å—Ç–∞: –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–∞")
        main_page = MainPage(login)

        main_page.open_url(Urls.BASE_URL)
        main_page.close_overlay_if_present()

        main_page.click_ingredient()
        assert main_page.is_ingredient_modal_visible(), "–ú–æ–¥–∞–ª–∫–∞ –Ω–µ –æ—Ç–∫—Ä—ã–ª–∞—Å—å"

        main_page.close_modal()
        assert main_page.is_modal_closed(), "–ú–æ–¥–∞–ª–∫–∞ –Ω–µ –∑–∞–∫—Ä—ã–ª–∞—Å—å"

        logger.info("–¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω: –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –∑–∞–∫—Ä—ã–≤–∞–µ—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")

    @allure.title("–£–≤–µ–ª–∏—á–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–∞ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤ –∑–∞–∫–∞–∑")
    def test_ingredient_counter_increase(self, login):
        logger.info("–ù–∞—á–∞–ª–æ —Ç–µ—Å—Ç–∞: –£–≤–µ–ª–∏—á–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–∞ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–∞")
        main_page = MainPage(login)

        main_page.open_url(Urls.BASE_URL)
        main_page.close_overlay_if_present()

        initial_counter = main_page.get_ingredient_counter_value()
        logger.info(f"–ù–∞—á–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–∞: {initial_counter}")

        main_page.add_ingredient_to_order()

        final_counter = main_page.get_ingredient_counter_value()
        logger.info(f"–ö–æ–Ω–µ—á–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–∞: {final_counter}")

        expected_increase = 2
        actual_increase = final_counter - initial_counter

        assert actual_increase == expected_increase, (
            f"–°—á–µ—Ç—á–∏–∫ —É–≤–µ–ª–∏—á–∏–ª—Å—è –Ω–∞ {actual_increase}, –æ–∂–∏–¥–∞–ª–æ—Å—å: {expected_increase}. "
            f"–ë—ã–ª–æ: {initial_counter}, —Å—Ç–∞–ª–æ: {final_counter}"
        )

        logger.info("–¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω: —Å—á–µ—Ç—á–∏–∫ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–∞ —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
